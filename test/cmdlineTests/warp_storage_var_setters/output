IR:
/*=====================================================*
 *                       WARNING                       *
 *  Solidity to Yul compilation is still EXPERIMENTAL  *
 *       It can result in LOSS OF FUNDS or worse       *
 *                !USE AT YOUR OWN RISK!               *
 *=====================================================*/


/// @use-src 0:"warp_storage_var_setters/input.sol", 1:"#utility.yul"
object "WARP_24" {
    code {
        /// @src 0:27:221
        mstore(64, 128)
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        constructor_WARP_24()

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("WARP_24_deployed"), datasize("WARP_24_deployed"))

        return(_1, datasize("WARP_24_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        /// @src 0:27:221
        function constructor_WARP_24() {

            /// @src 0:27:221

        }
        /// @src 0:27:221

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

    }
    object "WARP_24_deployed" {
        code {
            /// @src 0:27:221
            mstore(64, 128)

            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector

                case 0xe2bbb158
                {
                    // deposit(uint256,uint256)

                    let param_0, param_1 :=  abi_decode_tuple_t_uint256t_uint256(4, calldatasize())
                    fun_deposit_23(param_0, param_1)
                    let memPos := allocate_unbounded()
                    let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                    return(memPos, sub(memEnd, memPos))
                }

                default {}
            }
            if iszero(calldatasize()) {  }
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function abi_decode_t_uint256(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }

            function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {
                if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 32

                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

            }

            function abi_encode_tuple__to__fromStack(headStart ) -> tail {
                tail := add(headStart, 0)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function checked_add_t_uint256(x, y) -> sum {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                // overflow, if x > (maxValue - y)
                if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }

                sum := add(x, y)
            }

            function cleanup_t_uint256(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_5_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(value)
            }

            /// @src 0:110:219
            function fun_deposit_23(var_sender_9, var_value_11) {

                /// @src 0:211:212
                let expr_19 := 0x05
                /// @src 0:183:212
                let _1 := convert_t_rational_5_by_1_to_t_uint256(expr_19)
                /// @src 0:193:199
                let _2 := var_sender_9
                let expr_15 := _2
                /// @src 0:201:206
                let _3 := var_value_11
                let expr_16 := _3
                /// @src 0:183:212
                let _4 := getter_fun_allowance_7(expr_15, expr_16)
                let expr_20 := checked_add_t_uint256(_4, _1)

                setter_fun_allowance_7(expr_15, expr_16, expr_20)

            }
            /// @src 0:27:221

            function getter_fun_allowance_7(arg0, arg1) -> value {
                revert(0, 0) /// WARP STUB
            }

            function panic_error_0x11() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {
                revert(0, 0)
            }

            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
                revert(0, 0)
            }

            function setter_fun_allowance_7(arg0, arg1, value) {
                revert(0, 0) /// WARP STUB
            }

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function validator_revert_t_uint256(value) {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }

        }

        data ".metadata" hex"<BYTECODE REMOVED>"
    }

}
